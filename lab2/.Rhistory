x <- 42
x
treatment <- 36
control <- 38
y <- 30 #as a reminder, the arrow is also known as 'gets.' This should always be used for the assignment of an object rather than '='.
my_experiment <- sum(treatment, control)
my_experiment
treatment+control #when tab complete options are listed, objects will be indicated by a purple square
else <- 12
?mean
venom_GT <- 270
chiron <- 261
veyron <- 268
270 + 261 + 268
mean(venom_GT, chiron, veyron)
(270 + 261 + 268)/3
venom_GT <- 270
chiron <- 261
veyron <- 268
#alternatively you can use 'c()' to concatenate
cars <- c(venom_GT, chiron, veyron)
#alternatively you can use 'c()' to concatenate
cars <- c(venom_GT, chiron, veyron)
mean(cars)
my_numeric <- 42 #most accurate
my_integer <- 2L #adding an L automatically denotes an integer aka removes decimal values
my_character <- "universe"
my_logical <- FALSE #these are also called 'booleans'
my_complex <- 2+4i
class(my_numeric)
is.integer(my_numeric) #is my_numeric an integer?
my_integer <-
as.integer(my_numeric) #create a new object specified as an integer
is.integer(my_numeric) #is my_numeric an integer?
?as.integer
my_missing <- NA
is.na(my_missing)
anyNA(my_missing)
new_vector <- c(7, 6.2, 5, 9, NA, 4, 9.8, 7, 3, 2)
mean(new_vector)
mean(new_vector, na.rm=T) #na.rm removes the NA values in the vector
my_vector <- c(10, 20, 30)
days_of_the_week <- c("Monday", "Tuesday", "Wednesday", "Thrusday", "Friday", "Saturday", "Sunday")
my_vector_sequence <- c(1:100)
my_vector_sequence
days_of_the_week[3]
my_vector_sequence[15]
my_vector_sequence[=15]
?[]
my_vector_sequence = 15
my_vector_sequence <- c(1:100) #this will produce a vector of the numbers 1 - 100.
my_vector_sequence
my_vector_sequence[15] #works but won't evaluate each number in the sequence
my_vector_sequence==15 #checks each position, to return a vector of the same size, for which each position is denoted either TRUE or FALSE depending on whether it meets the criteria specified.
my_vector_sequence <= 10
my_vector_sequence[my_vector_sequence<=10] #will look at the vector to evaluate the expression above and then return a vector of the values that are assigned TRUE
box_office <- c(Philosophers_Stone, Chamber_of_Secrets, Prisoner_of_Azkaban, Goblet_of_Fire, Order_of_the_Phoenix, Half_Blood_Prince, Deathly_Hallows_1, Deathly_Hallows_2)
Philosophers_Stone <- c(317.5, 657.1)
Chamber_of_Secrets <- c(261.9, 616.9)
Prisoner_of_Azkaban <- c(249.5, 547.1)
Goblet_of_Fire <- c(290.0, 606.8)
Order_of_the_Phoenix <- c(292.0, 647.8)
Half_Blood_Prince <- c(301.9, 632.4)
Deathly_Hallows_1 <- c(295.9, 664.3)
Deathly_Hallows_2 <- c(381.0, 960.5)
box_office <- c(Philosophers_Stone, Chamber_of_Secrets, Prisoner_of_Azkaban, Goblet_of_Fire, Order_of_the_Phoenix, Half_Blood_Prince, Deathly_Hallows_1, Deathly_Hallows_2)
box_office
harry_potter_matrix <- matrix(box_office, nrow = 8, byrow = T)
harry_potter_matrix
harry_potter_matrix <- matrix(box_office, nrow = 8, byrow = T)
harry_potter_matrix
harry_potter_matrix[1,2]
region <- c("US", "non-US")
region
titles <- c("Philosophers_Stone", "Chamber_of_Secrets", "Prisoner_of_Azkaban", "Goblet_of_Fire", "Order_of_the_Phoenix", "Half_Blood_Prince", "Deathly_Hallows_1", "Deathly_Hallows_2")
titles
colnames(harry_potter_matrix) <- region
rownames(harry_potter_matrix) <- titles
rownames(harry_potter_matrix) <- titles
harry_potter_matrix
global <- rowSums(harry_potter_matrix)
global
all_harry_potter_matrix <- cbind(harry_potter_matrix, global)
all_harry_potter_matrix
?colSums
?colSums
total <- colSums(harry_potter_matrix)
?rbind
?colSums
total <- colSums(harry_potter_matrix)
final_harry_potter_matrix <- rbind(all_harry_potter_matrix, total)
all_harry_potter_matrix <- rbind(all_harry_potter_matrix, total)
?colSums
total <- colSums(harry_potter_matrix)
total
all_harry_potter_matrix <- rbind(harry_potter_matrix, total)
all_harry_potter_matrix <- rbind(harry_potter_matrix, total)
all_harry_potter_matrix <- rbind(harry_potter_matrix, total)
harry_potter_matrix
all_harry_potter_matrix
?colSums
total <- colSums(all_harry_potter_matrix)
total
?colSums
total <- colSums(all_harry_potter_matrix)
total
all_harry_potter_matrix <- cbind(harry_potter_matrix, global)
all_harry_potter_matrix
?colSums
total <- colSums(all_harry_potter_matrix)
total
my_vector_sequence[15] #works but won't evaluate each number in the sequence
my_vector_sequence <- c(1:100) #this will produce a vector of the numbers 1 - 100.
my_vector_sequence
my_vector_sequence[15] #works but won't evaluate each number in the sequence
my_vector_sequence==15 #checks each position, to return a vector of the same size, for which each position is denoted either TRUE or FALSE depending on whether it meets the criteria specified.
my_vector_sequence <= 10
my_vector_sequence[my_vector_sequence<=10] #will look at the vector to evaluate the expression inside and then return a vector of the values that are assigned TRUE (i.e. values that met the condition)
Philosophers_Stone <- c(317.5, 657.1)
Chamber_of_Secrets <- c(261.9, 616.9)
Prisoner_of_Azkaban <- c(249.5, 547.1)
Goblet_of_Fire <- c(290.0, 606.8)
Order_of_the_Phoenix <- c(292.0, 647.8)
Half_Blood_Prince <- c(301.9, 632.4)
Deathly_Hallows_1 <- c(295.9, 664.3)
Deathly_Hallows_2 <- c(381.0, 960.5)
Philosophers_Stone <- c(317.5, 657.1)
Chamber_of_Secrets <- c(261.9, 616.9)
Prisoner_of_Azkaban <- c(249.5, 547.1)
Goblet_of_Fire <- c(290.0, 606.8)
Order_of_the_Phoenix <- c(292.0, 647.8)
Half_Blood_Prince <- c(301.9, 632.4)
Deathly_Hallows_1 <- c(295.9, 664.3)
Deathly_Hallows_2 <- c(381.0, 960.5)
box_office <- c(Philosophers_Stone, Chamber_of_Secrets, Prisoner_of_Azkaban, Goblet_of_Fire, Order_of_the_Phoenix, Half_Blood_Prince, Deathly_Hallows_1, Deathly_Hallows_2)
box_office #although the values are combined, their pairing information is lost
?matrix
harry_potter_matrix <- matrix(box_office, nrow = 8, byrow = T)
harry_potter_matrix
harry_potter_matrix <- matrix(box_office, nrow = 8, byrow = F)
harry_potter_matrix
?matrix
harry_potter_matrix <- matrix(box_office, nrow = 16, byrow = F)
harry_potter_matrix
harry_potter_matrix[1,2]
?matrix
harry_potter_matrix <- matrix(box_office, nrow = 16, byrow = F)
harry_potter_matrix
harry_potter_matrix[1,2]
?matrix
harry_potter_matrix <- matrix(box_office, nrow = 16, byrow = T) #nrow determines the number of rows in the matrix (columns are determined by ncol)
harry_potter_matrix
harry_potter_matrix[1,2]
harry_potter_matrix <- matrix(box_office, nrow = 16, byrow = T) #nrow determines the number of rows in the matrix (columns are determined by ncol)
harry_potter_matrix
harry_potter_matrix <- matrix(box_office, nrow = 4, byrow = T) #nrow determines the number of rows in the matrix (columns are determined by ncol)
harry_potter_matrix
harry_potter_matrix <- matrix(box_office, nrow = 8, byrow = T) #nrow determines the number of rows in the matrix (columns are determined by ncol or made to accomodate the data given the number of rows); byrow makes the matrix fill its cells by row
harry_potter_matrix
harry_potter_matrix <- matrix(box_office, nrow = 8, byrow = T) #nrow determines the number of rows in the matrix (columns are determined by ncol or made to accomodate the data given the number of rows); byrow makes the matrix fill its cells by row
harry_potter_matrix
region <- c("US", "non-US")
region
titles <- c("Philosophers_Stone", "Chamber_of_Secrets", "Prisoner_of_Azkaban", "Goblet_of_Fire", "Order_of_the_Phoenix", "Half_Blood_Prince", "Deathly_Hallows_1", "Deathly_Hallows_2")
titles
?colnames
?colnames
colnames(harry_potter_matrix) <- region #assigns the matrix column names 'region'
?rownames
?rownames
rownames(harry_potter_matrix) <- titles
harry_potter_matrix
global <- rowSums(harry_potter_matrix)
global
?cbind
?cbind
all_harry_potter_matrix <- cbind(harry_potter_matrix, global)
all_harry_potter_matrix
?colSums
total <- colSums(all_harry_potter_matrix)
total
harry_potter_matrix[2,1]
harry_potter_matrix[1:4]
harry_potter_matrix[2:4]
harry_potter_matrix[2,1:4]
harry_potter_matrix[9:12]
non_us_earnings <- all_harry_potter_matrix[ ,2]
mean(non_us_earnings)
non_us_earnings <- all_harry_potter_matrix[ ,2]
mean(non_us_earnings)
Goblet_of_Fire_Mean <- all_harry_potter_matrix[4,]
mean(Goblet_of_Fire_Mean)
Goblet_of_Fire_Mean <- all_harry_potter_matrix[4]
mean(Goblet_of_Fire_Mean)
spring_1 <- c(36.25, 35.40, 35.30)
spring_2 <- c(35.15, 35.35, 33.35)
spring_3 <- c(30.70, 29.65, 29.20)
spring_4 <- c(39.70, 40.05, 38.65)
spring_5 <- c(31.85, 31.40, 29.30)
spring_6 <- c(30.20, 30.65, 29.75)
spring_7 <- c(32.90, 32.50, 32.80)
spring_8 <- c(36.80, 36.45, 33.15)
all_spring <- c(spring_1, spring_2, spring_3, spring_4, spring_5, spring_6, spring_7, spring_8)
all_spring
all_spring <- c(spring_1, spring_2, spring_3, spring_4, spring_5, spring_6, spring_7, spring_8)
all_spring
all_spring_matrix <- matrix(all_spring, nrow = 8, byrow = TRUE)
all_spring_matrix
spring_names <- c('Bluebell Spring', 'Opal Spring', 'Riverside Spring', 'Too Hot Spring', 'Mystery Spring', 'Emerald Spring', 'Black Spring', 'Pearl Spring')
scientist_names <- c('Jill', 'Steve', 'Susan')
colnames(all_spring_matrix) <- scientist_names
rownames(all_spring_matrix) <- spring_names
all_spring_matrix
Average_Temp <- (rowSums(all_spring_matrix))/3
Average_Temp
average_temp <- (rowSums(all_spring_matrix))/3
average_temp
final_spring_matrix <- cbind(all_spring_matrix, average_temp)
final_spring_matrix <- cbind(all_spring_matrix, average_temp)
final_spring_matrix
final_spring_matrix[2,3]
jill_values <- final_spring_matrix[ ,1]
mean(jill_values)
average_temp_column <- final_spring_matrix[ ,4]
mean(average_temp_column)
spring_1 <- c(36.25, 35.40, 35.30)
spring_2 <- c(35.15, 35.35, 33.35)
spring_3 <- c(30.70, 29.65, 29.20)
spring_4 <- c(39.70, 40.05, 38.65)
spring_5 <- c(31.85, 31.40, 29.30)
spring_6 <- c(30.20, 30.65, 29.75)
spring_7 <- c(32.90, 32.50, 32.80)
spring_8 <- c(36.80, 36.45, 33.15)
all_spring <- c(spring_1, spring_2, spring_3, spring_4, spring_5, spring_6, spring_7, spring_8)
all_spring
all_spring_matrix <- matrix(all_spring, nrow = 8, byrow = TRUE)
all_spring_matrix
spring_names <- c('Bluebell Spring', 'Opal Spring', 'Riverside Spring', 'Too Hot Spring', 'Mystery Spring', 'Emerald Spring', 'Black Spring', 'Pearl Spring')
scientist_names <- c('Jill', 'Steve', 'Susan')
colnames(all_spring_matrix) <- scientist_names
rownames(all_spring_matrix) <- spring_names
all_spring_matrix
average_temp <- (rowSums(all_spring_matrix))/3
average_temp
final_spring_matrix <- cbind(all_spring_matrix, average_temp)
final_spring_matrix
final_spring_matrix[2,3]
jill_values <- final_spring_matrix[ ,1]
mean(jill_values)
average_temp_column <- final_spring_matrix[ ,4]
mean(average_temp_column)
