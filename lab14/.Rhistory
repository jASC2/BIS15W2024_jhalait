knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
#install.packages("shiny")
library(shiny)
library("tidyverse")
library("palmerpenguins")
runApp("plot_iris.R")
library(shiny)
ui <- fluidPage(
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
names(penguins)
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"), selected = "bill_length_mm")
) # refers to dropdown menus. x = name of variable (followed by a prompt and its options). Selected = where it will start
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"), selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"), selected = "bill_length_mm")
)
server <- function(input, output) {
}
shinyApp(ui, server)
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"), selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"), selected = "bill_length_mm")
)
server <- function(input, output) {
}
shinyApp(ui, server)
penguins %>%
ggplot(aes(x=bill_length_mm, y=body_mass_g))+
geom_point()
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
plotOutput("plot", width="500px", height="400px") # provides the size/aspect of the visual
)
server <- function(input, output) {
output$plot <- renderPlot({
ggplot(data=penguins, aes_string(x=input$x, y=input$y, color="species"))+
geom_point()+
theme_light(base_size=18)
})
}
shinyApp(ui, server)
homerange <- read_csv("data/Tamburelloetal_HomeRangeDatabase.csv")
names(homerange)
View(homerange)
homerange %>%
ggplot(aes=(x=locomotion, fill = trophic.guild))+
homerange %>%
ggplot(aes=(x=locomotion, fill=trophic.guild))+
homerange %>%
ggplot(aes=(x=locomotion, fill=trophic.guild))+
homerange %>%
ggplot(aes(x=locomotion, fill=trophic.guild))+
geom_bar(position="dodge")
homerange %>%
ggplot(aes(x=locomotion, fill=trophic.guild))+
geom_bar(position="dodge")
homerange %>%
ggplot(aes(x=locomotion, fill=thermoregulation))+
geom_bar(position="dodge")
ui <- fluidPage(
selectInput("f", "Select Your Fill Option", choices = c("trophic.guild", "thermoregulation"),
selected = "trophic.guild"),
plotOutput("plot", width="500px", height="400px")
)
server <- function(input, output) {
output$plot <- renderPlot({
ggplot(data=penguins, aes_string(x="locomotion", fill=input$y))+
geom_bar()+
theme_light(base_size=18)
})
}
shinyApp(ui, server)
ui <- fluidPage(
selectInput("f", "Select Your Fill Option", choices = c("trophic.guild", "thermoregulation"),
selected = "trophic.guild"),
plotOutput("plot", width="500px", height="400px")
)
server <- function(input, output) {
output$plot <- renderPlot({
ggplot(data=homerange, aes_string(x="locomotion", fill=input$y))+
geom_bar()+
theme_light(base_size=18)
})
}
shinyApp(ui, server)
ui <- fluidPage(
selectInput("f", "Select Your Fill Option", choices = c("trophic.guild", "thermoregulation"),
selected = "trophic.guild"),
plotOutput("plot", width="500px", height="400px")
)
server <- function(input, output) {
output$plot <- renderPlot({
ggplot(data=homerange, aes_string(x="locomotion", fill=input$y))+
geom_bar(position = "dodge")+
theme_light(base_size=18)
})
}
shinyApp(ui, server)
ui <- fluidPage(
selectInput("f", "Select Your Fill Option", choices = c("trophic.guild", "thermoregulation"),
selected = "trophic.guild"),
plotOutput("plot", width="500px", height="400px")
)
server <- function(input, output) {
output$plot <- renderPlot({
ggplot(data=homerange, aes_string(x="locomotion", fill=input$f))+
geom_bar(position = "dodge")+
theme_light(base_size=18)
})
}
shinyApp(ui, server)
ui <- fluidPage(
radioButtons("f", "Select Your Fill Option", choices = c("trophic.guild", "thermoregulation"),
selected = "trophic.guild"),
plotOutput("plot", width="500px", height="400px")
)
server <- function(input, output) {
output$plot <- renderPlot({ #specifies the function is to make a plot
ggplot(data=homerange, aes_string(x="locomotion", fill=input$f))+
geom_bar(position = "dodge", alpha=0.8, color="black")+
labs(x=NULL, fill="Fill Variable")
theme_light(base_size=18)
})
}
shinyApp(ui, server)
ui <- fluidPage(
radioButtons("f", "Select Your Fill Option", choices = c("trophic.guild", "thermoregulation"),
selected = "trophic.guild"),
plotOutput("plot")
)
server <- function(input, output) {
output$plot <- renderPlot({ #specifies the function is to make a plot
ggplot(data=homerange, aes_string(x="locomotion", fill=input$f))+
geom_bar(position = "dodge", alpha=0.8, color="black")+
labs(x=NULL, fill="Fill Variable")
theme_light(base_size=18)
})
}
shinyApp(ui, server)
ui <- fluidPage(
radioButtons("f", "Select Your Fill Option", choices = c("trophic.guild", "thermoregulation"),
selected = "trophic.guild"),
plotOutput("plot", width="500px", height="400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({ #specifies the function is to make a plot
ggplot(data=homerange, aes_string(x="locomotion", fill=input$f))+
geom_bar(position = "dodge", alpha=0.8, color="black")+
labs(x=NULL, fill="Fill Variable")
theme_light(base_size=18)
})
}
shinyApp(ui, server)
ui <- fluidPage(
radioButtons("f", "Select Your Fill Option", choices = c("trophic.guild", "thermoregulation"),
selected = "trophic.guild"),
plotOutput("plot", width="500px", height="400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({ #specifies the function is to make a plot
ggplot(data=homerange, aes_string(x="locomotion", fill=input$f))+
geom_bar(position = "dodge", alpha=0.8, color="black")+
labs(x=NULL, fill="Fill Variable")+
theme_light(base_size=18)
})
}
shinyApp(ui, server)
install.packages("shinydashboard")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(tidyverse)
library(shiny)
library(shinydashboard)
require(janitor)
library(palmerpenguins)
runApp('homerange_app.R')
homerange %>%
filter(taxon=="mammals") %>%
ggplot(aes(x=log10.hra))+
geom_density(fill="steelblue", color="black", alpha=0.6)
ui <- fluidPage(titlePanel("Log 10 Homerange by Taxon"), #adds a title to the app
selectInput("x", "Select Taxon",
choices = c("birds", "lake fishes", "lizards", "mammals", "marine fishes", "river fishes", "snakes", "tortoises", "turtles"), selected="birds"),
plotOutput("plot", width="600px", height="500px")
)# close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
homerange %>%
filter(taxon==input$x) %>% #reactive part is the filter, so no need to change aes in ggplot to aes_string
ggplot(aes(x=log10.hra))+
geom_density(fill="steelblue", color = "black", alpha = 0.8)
})
}
shinyApp(ui, server)
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_depth_mm"),
sliderInput("pointsize", "Select the Point Size", min = 0.5, max = 3, value = 1, step = 0.5),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
ggplot(penguins, aes_string(x = input$x, y = input$y, color="species")) +
geom_point(size=input$pointsize) +
theme_light()
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title="Penguins"), #adds a title
dashboardSidebar(disable=T), #turns off sidebar
dashboardBody( #contains ui code
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_depth_mm"),
sliderInput("pointsize", "Select the Point Size", min = 0.5, max = 3, value = 1, step = 0.5),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output, session) {
ui <- dashboardPage(
dashboardHeader(title="Penguins"), #adds a title
dashboardSidebar(disable=T), #turns off sidebar
dashboardBody( #contains ui code
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_depth_mm"),
sliderInput("pointsize", "Select the Point Size", min = 0.5, max = 3, value = 1, step = 0.5),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output, session) {
ui <- dashboardPage(
dashboardHeader(title="Penguins"), #adds a title
dashboardSidebar(disable=T), #turns off sidebar
dashboardBody( #contains ui code
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_depth_mm"),
sliderInput("pointsize", "Select the Point Size", min = 0.5, max = 3, value = 1, step = 0.5),
plotOutput("plot", width = "500px", height = "400px")
),
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
ggplot(penguins, aes_string(x = input$x, y = input$y, color="species")) +
geom_point(size=input$pointsize) +
theme_light()
})
}
shinyApp(ui, server))
ui <- dashboardPage(
dashboardHeader(title = "Penguins"),
dashboardSidebar(disable=T),
dashboardBody(
fluidRow(
box(
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"), selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"), selected = "bill_depth_mm"),
), # close the first box
box(
plotOutput("plot", width = "500px", height = "400px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
session$onSessionEnded(stopApp) #automatically stop the app when we close it
output$plot <- renderPlot({
ggplot(data=penguins, aes_string(x = input$x, y = input$y, color="species")) +
geom_point() +
theme_light()
})
}
shinyApp(ui, server)
wolves <- read_csv("data/wolves_data/wolves_dataset.csv")
wolves %>%
filter(sex!="NA") %>%
ggplot(aes(x=sex, fill=sex))+
geom_bar()+
facet_wrap(~pop)
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody(
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_depth_mm"),
sliderInput("pointsize", "Select the Point Size", min = 0.5, max = 3, value = 1, step = 0.5),
plotOutput("plot", width = "500px", height = "400px")
)
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
ggplot(penguins, aes_string(x = input$x, y = input$y, color="species")) +
geom_point(size=input$pointsize) +
theme_light()
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title="Sex Composition by Wolf Population"),
dashboardSidebar(disabl=T),
dashboardBody(
fluidrow(
box(width=3, #controls box width. must be encased with a fluidrow for dashboardBody
selectInput("x", "Select Population", choices=unique(wolves$pop)), hr()
), #closes first box
box(width=7,
plotOutput("plot", width="600px", height="400px")
) #closes the second box
) #closes the row
) #closes the dashboard body
) #closes the UI
ui <- dashboardPage(
dashboardHeader(title="Sex Composition by Wolf Population"),
dashboardSidebar(disabl=T),
dashboardBody(
fluidRow(
box(width=3, #controls box width. must be encased with a fluidrow for dashboardBody
selectInput("x", "Select Population", choices=unique(wolves$pop)), hr()
), #closes first box
box(width=7,
plotOutput("plot", width="600px", height="400px")
) #closes the second box
) #closes the row
) #closes the dashboard body
) #closes the UI
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
wolves %>%
filter(sex!="NA") %>%
filter(pop==input$x) %>%
ggplot(aes(x=sex, fill=sex))+
geom_bar()
})
} #closes the server
shinyApp(ui, server)
install("shinythemes")
installed.packages("shinythemes")
library(shinythemes)
installed.packages("shinythemes")
library("shinythemes")
installed.packages("shinythemes")
library("shinythemes")
install.packages("shinythemes")
library("shinythemes")
ui <- fluidPage(
#shinythemes::themeSelector(),  # <--- Add this somewhere in the UI
theme = shinytheme("cerulean"),
titlePanel("Log 10 Homerange by Taxon"), # give the page a title
# generate a row with a sidebar
sidebarLayout(
# define the sidebar with one input
sidebarPanel(
selectInput("taxon", " Select Taxon of Interest:", choices=unique(homerange$taxon)), hr(),
helpText("Reference: Tamburello N, Cote IM, Dulvy NK (2015) Energy and the scaling of animal space use. The American Naturalist 186(2):196-211.")),
# create a spot for the barplot
mainPanel(
plotOutput("taxonPlot"))
)
)
# define a server for the Shiny app
server <- function(input, output, session) {
# this stops the app upon closing
session$onSessionEnded(stopApp)
# fill in the spot we created for a plot
output$taxonPlot <- renderPlot({
homerange %>%
filter(taxon == input$taxon) %>%
ggplot(aes(x=log10.hra)) +
geom_density(color="black", fill="steelblue", alpha=0.6)
})
}
shinyApp(ui, server)
